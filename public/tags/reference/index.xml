<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reference on Philip Mallegol-Hansen</title>
    <link>/tags/reference/</link>
    <description>Philip Mallegol-Hansen (Reference)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
      

      
    

    
    <lastBuildDate>Tue, 07 May 2024 09:33:00 -0700</lastBuildDate>
    
    <atom:link href="/tags/reference/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugo Dev Container</title>
      <link>/blog/hugo-dev-container/</link>
      <pubDate>Tue, 07 May 2024 09:33:00 -0700</pubDate>
      
      <guid>/blog/hugo-dev-container/</guid>
      <description>&lt;p&gt;As &lt;a href=&#34;https://philip.mallegolhansen.com/blog/embarrassment-is-a-sign-of-growth/&#34;&gt;recently mentioned&lt;/a&gt; I&amp;rsquo;m now using &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; as the technology upon which this blog is built. There are many things I like about Hugo, but one factor had been a bit annoying: To preview what my changes will end up looking like, I need access to a machine that has Hugo installed.&lt;/p&gt;
&lt;p&gt;This is all fine and dandy when I&amp;rsquo;m at my desk at home, where I do most of my writing. But I wanted the option to take this operation on the go, in case I&amp;rsquo;m somewhere with my iPad and feel an itch to write something down.&lt;/p&gt;
&lt;p&gt;Enter: &lt;a href=&#34;https://github.com/features/codespaces&#34;&gt;GitHub Codespaces&lt;/a&gt;. Codespaces are a relatively new feature in GitHub, that allow you to easily open up a clone of a GitHub repo inside a &lt;a href=&#34;https://containers.dev/&#34;&gt;Dev Container&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With a little bit of futzing around, I was able to add the following file to the repo that contains this site:&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/hanse00/84b236364612ee69be723dd6f9b67e6b.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;And just like that, I can launch a Codespace directly from the GitHub UI, and author posts in my web browser, run the hugo commands to preview the posts, and then commit them so they get deployed to the live site.&lt;/p&gt;
&lt;p&gt;There are a few rough edges, where clicking on links in the preview tries to load a URL relative to localhost, which won&amp;rsquo;t work since my site isn&amp;rsquo;t actually running &lt;em&gt;locally&lt;/em&gt; to me. Perhaps that&amp;rsquo;s just an error in the theme I&amp;rsquo;m using, I&amp;rsquo;m unsure for now.&lt;/p&gt;
&lt;p&gt;All in all, it&amp;rsquo;s still great compared to not having the option to author away from my desk at all. And embarassingly for Squarespace, this works &lt;em&gt;much&lt;/em&gt; better than their mobile UI.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Panel Custom Auth</title>
      <link>/blog/panel-custom-auth/</link>
      <pubDate>Mon, 06 May 2024 15:44:14 -0700</pubDate>
      
      <guid>/blog/panel-custom-auth/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently been using the &lt;a href=&#34;https://panel.holoviz.org&#34;&gt;Panel&lt;/a&gt; framework on a Python project.&lt;/p&gt;
&lt;p&gt;Deep in the bowels of the documentation, it is &lt;a href=&#34;https://panel.holoviz.org/how_to/authentication/providers.html#plugins&#34;&gt;mentioned&lt;/a&gt; that a custom auth plugin can be provided if a project needs to use a different authentication mechanism than those bundled with the framework, which is exactly what I needed.&lt;/p&gt;
&lt;p&gt;However between the vague docs, and the seeming lack of others actually having gone through with this option, it took me a while to figure out.&lt;/p&gt;
&lt;p&gt;And so, as any good &lt;a href=&#34;https://en.wikipedia.org/wiki/Netizen&#34;&gt;netizen&lt;/a&gt; I&amp;rsquo;m here to show you how I did it.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#solution&#34;&gt;
        #
    &lt;/a&gt;
    Solution
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re just looking for some code you can reference, here it is.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to learn more about how I got there, please read on.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/hanse00/9091a1deac10d3162b0e33e74cc3c1fe.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Note: I had to transcribe the code by hand, so be aware of potential typos.&lt;/p&gt;
&lt;h2 id=&#34;commentary&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#commentary&#34;&gt;
        #
    &lt;/a&gt;
    Commentary
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;As is often the case, I found it helpful to start with carefully reviewing the closest thing I could find to an existing solution.&lt;/p&gt;
&lt;p&gt;The Panel framework ships with a set of OAuth providers, and a &amp;ldquo;Basic Auth&amp;rdquo; provider. Given that the backend I needed to authenticate against is also a plain old username/password situation, the basic auth provider was my starting point.&lt;/p&gt;
&lt;p&gt;What didn&amp;rsquo;t work for me, was that the basic auth provider allows you to configure only one set of credentials, a specific username and password combination that anything entered will be checked against.&lt;/p&gt;
&lt;p&gt;So I went digging to figure out how exactly it was implemented.&lt;/p&gt;
&lt;p&gt;What I found was a set &lt;a href=&#34;https://github.com/holoviz/panel/blob/e6f658f6663b55ee9c5ecbdafd0e8235547bc5a1/panel/auth.py#L798&#34;&gt;LoginHandler&lt;/a&gt; and &lt;a href=&#34;https://github.com/holoviz/panel/blob/e6f658f6663b55ee9c5ecbdafd0e8235547bc5a1/panel/auth.py#L878&#34;&gt;AuthProvider&lt;/a&gt; objects that &lt;em&gt;nearly&lt;/em&gt; did what I needed. Unfortunately the aspects I needed to change weren&amp;rsquo;t trivially configurable in the existing objects, so I opted to wholesale copy and modify them.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;The outstanding task then was getting my panel application to actually load my auth provider. The &lt;code&gt;panel.serve&lt;/code&gt; function takes opaque set of key value arguments&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; that get passed down a rather lengthy call chain. Figuring out which of the auth related parameters would actually allow me to pass a specific object, rather than something like the name of a built-in auth provider, took a bit of spelunking with my debugger, but we got there in the end.&lt;/p&gt;
&lt;p&gt;In the end I think the moral of that whole story is: Debuggers are invaluable. I understand it might be intimidating to figure out how to wrangle a proper debugger, especially when it seems like print statements can get you 90% of the way. But I truly believe it&amp;rsquo;s a worthwhile endeavor to sit down and put a bit of effort into.&lt;/p&gt;
&lt;p&gt;Especially when it comes to figuring out a long call chain between third party dependencies, there&amp;rsquo;s really nothing like it.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;If anyone is looking for a side quest, I think it would be a great idea for the framework itself to contain versions of these objects where the authentication mechanism itself was the only thing that got plugged in, for maximum code reuse.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;I understand it&amp;rsquo;s a common pattern, but I don&amp;rsquo;t love it.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>tmux Cheatsheet</title>
      <link>/blog/tmux-cheatsheet/</link>
      <pubDate>Thu, 22 Feb 2024 11:01:25 -0800</pubDate>
      
      <guid>/blog/tmux-cheatsheet/</guid>
      <description>&lt;p&gt;One of the best parts of my career has always been the amazing people I’ve been privileged enough to work with, and whose presence has caused me to grow and evolve into a (hopefully) better version of myself.&lt;/p&gt;
&lt;p&gt;Among those special people is Mr. Alonso, who joined the team I was a part of in 2017, and immediately lifted the bar with his very presence. I consider myself fortunate to have known him, and his work.&lt;/p&gt;
&lt;p&gt;He created a one-page PDF file with handy &lt;a href=&#34;https://en.wikipedia.org/wiki/Tmux&#34;&gt;tmux&lt;/a&gt; invocations that I found particularly helpful, and posted it on his website for the world to see. Recently I tried to reference that sheet again, but found that his site was no more. I find that fact sad, as I believe in the web and everything it could be, but I do not judge his decision on a personal level.&lt;/p&gt;
&lt;p&gt;I reached out and as the gentleman he is, he graciously pulled the file from his archives, and allowed me to share it here with the rest of the world. So if you’re the kind of person who, like me, want a cheatsheet for tmux, here it is:&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;my_tmux_cheatsheet.pdf&#34;&gt;&lt;img src=&#34;https://philip.mallegolhansen.com/blog/tmux-cheatsheet/my_tmux_cheatsheet.pdf&#34;
    alt=&#34;A link to the tmux cheatsheet pdf.&#34;&gt;&lt;/a&gt;
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Just an HTML Document</title>
      <link>/blog/just-an-html-document/</link>
      <pubDate>Tue, 23 Jan 2024 18:03:08 -0800</pubDate>
      
      <guid>/blog/just-an-html-document/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://philip.mallegolhansen.com/blog/back-to-basics/&#34;&gt;I recently wrote&lt;/a&gt; a bit about wanting to return to tinkering with web technologies, without all of the noise that tends to get in the way in modern web development.&lt;/p&gt;
&lt;p&gt;Given that many people aren’t familiar with web development at all, and of those who are, I suspect many of the more junior folks haven’t ever done things the “old” way, I wanted to take a moment today to describe what exactly it takes to make a web page in this manner.&lt;/p&gt;
&lt;h2 id=&#34;html&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#html&#34;&gt;
        #
    &lt;/a&gt;
    HTML
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;HTML stands for HyperText Markup Language, all the language really is, is a definition a few special “tags” that you can write inline with the rest of your text, those tags in turn have special meanings that the web browser understands and “marks up” appropriately.&lt;/p&gt;
&lt;p&gt;For example, the tag &amp;lt;b&amp;gt; in HTML means bold, inversely &amp;lt;/b&amp;gt; means end-of-bold. So if you wrote something like: Hey there, &amp;lt;b&amp;gt;how&amp;lt;/b&amp;gt; are you? You would specify that the word “how” is in bold. The actual tags don’t get displayed in the text, the result would look like: Hey there, &lt;strong&gt;how&lt;/strong&gt; are you?&lt;/p&gt;
&lt;p&gt;Of course HTML has a whole host of other tags that do all sorts of things, from inserting video to changing the color of your text, if you know the right tags, you can do just about anything. But if you’re just getting started, there isn’t all that much you have to wrap your head around to make &lt;em&gt;something&lt;/em&gt; appear.&lt;/p&gt;
&lt;p&gt;A web page with a title and a few paragraphs of text would look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;Philip&amp;#39;s Web Playground&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Like many technologists, a combination of advancement in my own career and the steady evolution of the web has driven me away from interacting with web technologies as their most basic levels.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Rather than hand crafting HTML documents, we invent increasingly more complicated contraptions with the supposed goal of easing the original task.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    These new tools and technologies have their time and place, I believe that. But I also believe that we significantly overuse them, apply them at times and in places where they do &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;em&lt;/span&gt;&amp;gt;not&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;em&lt;/span&gt;&amp;gt; belong.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    This site exists for the explicit purpose of allowing me the joy of getting back in touch with the web, getting my hands &amp;#34;dirty&amp;#34; with web technologies new and old, and exploring their application.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    There is no dogma, I am not decidedly against any particular technology, nor am I committed to using technologies simply because they are the norm.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    I hope you find some use in this page, whether it be as a concrete technical example, or simply as an object that sparks your own curiosity for the web.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notable in the context of “modern” development practices: I wrote this myself, by hand. There’s no static site generator software, or other complexity involved in “generating” the HTML. I simply sat down at my editor, and wrote it.&lt;/p&gt;
&lt;h3 id=&#34;technically-valid-vs-usable&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#technically-valid-vs-usable&#34;&gt;
        ##
    &lt;/a&gt;
    Technically Valid vs. Usable
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Those of you who have experience developing web pages probably realized immediately that my example above is &lt;em&gt;technically&lt;/em&gt; invalid. It’s true, the HTML specification sets out a bunch of rules about which tags may be used under which circumstances, and my example does not adhere to those rules.&lt;/p&gt;
&lt;p&gt;However it’s worth understanding that over the past three decades, developers of web browsers have put in a lot of work to make sure that anything that even remotely resembles a valid HTML document will display correctly in their browser. The example I posted isn’t valid, but it &lt;em&gt;works&lt;/em&gt; in every browser I’ve tried.&lt;/p&gt;
&lt;p&gt;If you’re someone who is trying to learn web development, I strongly recommend you start by worrying about making things work. Once you have achieved something you feel good about, reformatting it to be valid is an easier fight, than worrying about a bunch of details up front you likely won’t understand.&lt;/p&gt;
&lt;h2 id=&#34;the-document&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#the-document&#34;&gt;
        #
    &lt;/a&gt;
    The Document
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Alright, we have a bit of HTML written up, now what? It goes in a document. Specifically the document should have the .html file extension, but besides that there’s no black magic. Any plain text editor, such as Notepad on Windows, or TextEdit on macOS will do.&lt;/p&gt;
&lt;p&gt;A mistake some folks make here is, you definitely do &lt;strong&gt;not want&lt;/strong&gt; to use a Word Processor such as Microsoft Word. These applications have their own use in marking up text documents for print and display, but they embed their own additional data besides the actual text, such as font size, position on page, etc. which does not make for valid HTML. If you try to create a page in Word and then save that, you’ll have a bad time trying to make an HTML document out of it. A simple text editor is your friend.&lt;/p&gt;
&lt;h2 id=&#34;hosting&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#hosting&#34;&gt;
        #
    &lt;/a&gt;
    Hosting
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Hosting is, in my opinion, the hardest part of web development to explain to people, and it’s also the source of much busywork.&lt;/p&gt;
&lt;p&gt;In brief, the purpose of hosting your webpage is: There needs to exist some URL (address) on the web that people can go to, and when they go there, your HTML document is presented to them. For this to happen, two distinct parts need to come together, an address needs to exist that points to a web server, and the server needs to be configured to return your page whenever people connect to it.&lt;/p&gt;
&lt;p&gt;In my case, I’ve elected to use Google Cloud Storage (GCS) as my web server, and configured a few things on the back end for that to work with the address &lt;a href=&#34;https://playground.mallegolhansen.com&#34;&gt;https://playground.mallegolhansen.com&lt;/a&gt;. We won’t today go into how I set up that, it can get a bit technically hairy. What’s important to know is this: The setup is a one-time activity, once everything is configured, it’s just like uploading a file to Google Drive, Dropbox, or some other internet connected storage service. Whatever HTML document I upload to the storage account, is what people get presented when they go to the address.&lt;/p&gt;
&lt;h2 id=&#34;updates&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#updates&#34;&gt;
        #
    &lt;/a&gt;
    Updates
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;So how do you update the page? You modify that document you have saved, adding, removing, or modifying the text and HTML Tags. Then you sign in to the web hosting solution and upload the new version of the file. And that’s it! There’s a constant loop of making changes to the document, and uploading the new version for people to see.&lt;/p&gt;
&lt;p&gt;Compared to the prevailing modern practices including dozens of tools you run, need to keep updated, and integrate with each other, web development really can be easy if you don’t &lt;em&gt;need&lt;/em&gt; all the potential advantages the tools offer.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
